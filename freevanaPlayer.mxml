<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication
    xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:s="library://ns.adobe.com/flex/spark"
    currentState="settingsState"
    showStatusBar="false"
    title="Freevana Player" 
    creationComplete="initApp()">
    <fx:Style source="assets/css/styles.css" />
    <fx:Script>
        <![CDATA[
            import mx.controls.Alert;
            import mx.core.UIComponent;
            import mx.utils.ObjectUtil;
            import mx.collections.ArrayCollection;
            import mx.managers.PopUpManager;

            import spark.components.Image;
            import spark.components.TextInput;
            import spark.components.Button;

            import flash.events.Event;
            import flash.events.MouseEvent;
            import flash.filesystem.File;

            import flash.net.URLRequest;
            import flash.net.URLLoader;

            import freevana.download.*;
            import freevana.util.*;
            import freevana.view.*;

            private static const HELP_BASE_URL:String = 'http://tirino.github.com/freevana/help/';

            private var _helpHtmlLoaded:Boolean = false;
            private var _movieIsLoading:Boolean = false;

            private var _settings:Settings = new Settings();
            private var _updates:Updates = new Updates();
            private var _updateData:Object;
            private var _db:FreevanaDB;
            private var _subtitleURL:String = "";
            private var _downloadBtnListener:Function;
            private var _openSubtitlesFolderListener:Function;

            [Bindable]
            private var _contactInfoTwitter:String = "Twitter: <a href='http://twitter.com/freevana/'>@freevana</a>";
            [Bindable]
            private var _dataProvMovies:ArrayCollection = new ArrayCollection();
            [Bindable]
            private var _dataProvSeries:ArrayCollection = new ArrayCollection();
            [Bindable]
            private var _dataProvSeasons:ArrayCollection = new ArrayCollection();
            [Bindable]
            private var _dataProvEpisodes:ArrayCollection = new ArrayCollection();

            public function initApp():void
            {
                // Apparently, this is the only way to style those <a> links
                var css:StyleSheet = new StyleSheet();
                css.parseCSS( "a { color: #FFE8B5; }" );
                settingsDBInfo.styleSheet = css;
                settingsSubsInfo.styleSheet = css;
                contactInfo.styleSheet = css;

                initLangs();
                _updates.checkForUpdates(updatesAvailable);

                if (!_settings.isSetupCompleted()) {
                    loadSettings();
                } else {
                    loadContent();
                }
            }

            public function getAppVersion():String {
                var appXml:XML = NativeApplication.nativeApplication.applicationDescriptor;
                var ns:Namespace = appXml.namespace();
                var appVersion:String = appXml.ns::versionNumber[0];
                return appVersion;
            }

            private function getUserLang():String
            {
                var langs:Array = Capabilities.languages;
                return (langs[0] as String).toUpperCase();
            }

            private function initLangs():void
            {
                var prefLang:String = getUserLang();
                trace("[main] Lang is: " + prefLang);
                if (prefLang.indexOf("EN") != -1) {
                    resourceManager.localeChain = ['en_US'];
                } else {
                    resourceManager.localeChain = ['es_ES'];
                }
            }

            public function loadHelp():void
            {
                currentState='helpState';
                if (!_helpHtmlLoaded) {
                    var helpFile:String = HELP_BASE_URL + getUserLang() + '_' + getAppVersion() + '.html';
                    trace(helpFile);
                    var htmlLoader:HTMLLoader = new HTMLLoader();
                    var urlReq:URLRequest = new URLRequest(helpFile);
                    var myComp:UIComponent = new UIComponent();
                    htmlLoader.width = 670;
                    htmlLoader.height = 300;
                    htmlLoader.load(urlReq);
                    myComp.addChild(htmlLoader);
                    htmlLoader.addEventListener(Event.COMPLETE, function(ev:Event):void {
                        trace("Loaded help html");
                        helpHtml.removeAllChildren();
                        helpHtml.addChild(myComp);
                    });
                    _helpHtmlLoaded = true;
                }
            }

            public function loadSettings():void
            {
                currentState="settingsState";
                var resources:Resources = new Resources();

                if (!subtitlesBtn.enabled) {
                    subtitlesBtn.enabled = true;
                    subtitlesBtn.addEventListener(MouseEvent.CLICK, function(ev:Event):void {
                        resources.selectSubtitlesDir(function (dir:File):void {
                            if (dir != null) {
                                _settings.setSubtitlesDir(dir);
                                subtitlesLbl.text = dir.nativePath;
                            }
                        });
                    });
                }

                if (!databaseBtn.enabled) {
                    databaseBtn.enabled = true;
                    databaseBtn.addEventListener(MouseEvent.CLICK, function(ev:Event):void {
                        resources.copyDB(function ():void {
                            _db = new FreevanaDB(Resources.DATABASE_FILE_PATH);
                            databaseLbl.text = _db.getVersionName();
                            databaseError.text = "";
                            settingsStartBtn.enabled = true;
                            _settings.markSetupCompleted();
                        });
                    });
                }

                var subsDir:File = _settings.getSubtitlesDir();
                if (subsDir != null) {
                    subtitlesLbl.text = subsDir.nativePath;
                }

                if (!resources.checkDB()) {
                    databaseError.text = resourceManager.getString('Strings', 'SETTINGS_DATABASE_NONE_ERROR');
                } else {
                    _db = new FreevanaDB(Resources.DATABASE_FILE_PATH);
                    trace(_db.getVersionName());
                    databaseLbl.text = _db.getVersionName();
                    settingsStartBtn.enabled = true;
                    if (!_settings.isSetupCompleted()) {
                        _settings.markSetupCompleted();
                    }
                }
                // Select correct subs size
                var selSubsSizeName:String = _settings.getSubtitlesSize();
                var selSubsSizeIdx:int = (selSubsSizeName == VideoPlayer.SUBTITLES_SMALL) ? 0 :
                                     (selSubsSizeName == VideoPlayer.SUBTITLES_BIG) ? 2 : 1;
                subtitlesSizeCombo.selectedIndex = selSubsSizeIdx;

                // Select preferred player
                var selPreferredPlayer:String = _settings.getPreferredPlayer();
                trace("selPreferredPlayer: " + selPreferredPlayer + ", " + VideoPlayer.VIDEO_PLAYER_OWN);
                var selPreferredPlayerIdx:int = (selPreferredPlayer == VideoPlayer.VIDEO_PLAYER_OWN) ? 0 : 1;
                preferredPlayerCombo.selectedIndex = selPreferredPlayerIdx;
            }

            private function loadContent():void {
                currentState = "libraryState";
                _db = new FreevanaDB(Resources.DATABASE_FILE_PATH);
                checkDBUpdate(_db.getVersionName());
                initMainDataGrids();
                loadMoviesAndSeries();
            }

            /**
            * Configure default DataGrids
            */
            private function initMainDataGrids():void {
                dgMovies.addEventListener("itemDoubleClick", movieClicked);
                dgSeries.addEventListener("itemDoubleClick", seriesClicked);

                function movieClicked(ev:*):void {
                    var movie:Object = dgMovies.selectedItem;
                    startGettingVideoData(movie, true);
                }
                function seriesClicked(ev:*):void {
                    var series:Object = dgSeries.selectedItem;
                    loadSeasons(series.id);
                    initSeriesDataGrids();
                }
            }

            private function initSeriesDataGrids():void {
                dgSeasons.addEventListener("itemDoubleClick", seasonsClicked);
                dgEpisodes.addEventListener("itemDoubleClick", episodesClicked);

                function seasonsClicked(ev:*):void {
                    var season:Object = dgSeasons.selectedItem;
                    loadEpisodes(season.id);
                }
                function episodesClicked(ev:*):void {
                    var episode:Object = dgEpisodes.selectedItem;
                    startGettingVideoData(episode, false);
                }
            }
            /**
            * Load DataGrids with data from the DB
            */
            private function loadMoviesAndSeries():void {
                _dataProvMovies = new ArrayCollection(_db.getMovies());
                _dataProvSeries = new ArrayCollection(_db.getSeries());
            }

            private function loadSeasons(seriesId:int):void {
                _dataProvSeasons = new ArrayCollection(_db.getSeasons(seriesId));
                _dataProvEpisodes = new ArrayCollection(new Array());
                currentState = "librarySeasonsState";
            }

            private function loadEpisodes(seasonId:int):void {
                var res:Array = _db.getEpisodes(seasonId);
                _dataProvEpisodes = new ArrayCollection(res);
                if (!res || res.length == 0) {
                    libraryMainLabel.text = resourceManager.getString('Strings', 'NO_EPISODES_LABEL');
                } else {
                    libraryMainLabel.text = resourceManager.getString('Strings', 'SEASONS_LABEL');
                }
                currentState = "librarySeasonsState";
            }

            private function resetDownloadVideo():void
            {
                loadingDownloadBtn.enabled = false;
                loadingDownloadContent.visible = false;
                loadingDownloadLink.htmlText = '';
                loadingSubtitleLink.text = ''
                loadingSubtitleBtn.enabled = false;
                if (_downloadBtnListener != null) {
                    loadingDownloadBtn.removeEventListener(MouseEvent.CLICK, _downloadBtnListener);
                    _downloadBtnListener = null;
                }
                if (_openSubtitlesFolderListener != null) {
                    loadingSubtitleBtn.removeEventListener(MouseEvent.CLICK, _openSubtitlesFolderListener);
                    _openSubtitlesFolderListener = null;
                }
            }

            private function resetVideoPlayer():void
            {
                _movieIsLoading = false;
                _subtitleURL = "";
                if (videoCanvas && videoCanvas != null) {
                    videoCanvas.removeAllChildren();
                }
            }

            private function startGettingVideoData(item:Object, isMovie:Boolean):void 
            {
                var _mainApp:* = this;
                
                // this is needed in case multiple double-clicks are triggered
                if (_movieIsLoading) {
                    trace("[main] already loding a movie!")
                    return;
                } else {
                    _movieIsLoading = true;
                }

                currentState = "loadingState";

                // Disable Download Link stuff
                resetDownloadVideo();

                loadingLbl.text = resourceManager.getString('Strings', 'CONTACTING_REMOTE_SERVER');
                trace(item.url);

                var _fileHost:IFileHost = FileHost.create(item);
                _fileHost.addEventListener(FileHost.PAGE_LOADED_EVENT, onPageLoaded);
                _fileHost.addEventListener(FileHost.COUNTER_CHANGED_EVENT, onCounterChanged);
                _fileHost.addEventListener(FileHost.RECAPTCHA_LOADED_EVENT, onRecaptchaNeeded);
                _fileHost.addEventListener(FileHost.LINK_AVAILABLE_EVENT, onLinkAvailable);
                _fileHost.addEventListener(FileHost.LINK_UNAVAILABLE_EVENT, onLinkUnavailable);

                function onPageLoaded(ev:Event):void {
                    trace("[main] Page Loaded: " + ev.toString());
                }
                function onCounterChanged(ev:Event):void {
                    loadingLbl.text = resourceManager.getString('Strings', 'VIDEO_WILL_START') + _fileHost.getCounterValue();
                }
                function onRecaptchaNeeded(ev:Event):void {
                    var panel:Panel = new Panel();
                    panel.title = "ReCaptcha";


                    var img:spark.components.Image = new spark.components.Image();
                    img.source = _fileHost.getRecaptchaImageURL();
                    var txt:spark.components.TextInput = new spark.components.TextInput();
                    txt.width = 300;
                    txt.height = 30;
                    var btn:spark.components.Button = new spark.components.Button();
                    btn.label = resourceManager.getString('Strings', 'FILEHOST_SEND_RECAPTCHA');

                    btn.width = 200;
                    btn.addEventListener(MouseEvent.CLICK, function(ev:Event):void {
                        trace("You entered: " + txt.text);
                        _fileHost.sendRecaptchaText(txt.text);
                        PopUpManager.removePopUp(panel);
                    });

                    var vgrp:spark.components.VGroup = new spark.components.VGroup();
                    vgrp.width = 350;
                    vgrp.height = 170;
                    vgrp.horizontalAlign = "center";
                    vgrp.addElement(img);
                    vgrp.addElement(txt);
                    vgrp.addElement(btn);

                    // Add and open Popup
                    panel.addChild(vgrp);
                    PopUpManager.addPopUp(panel, _mainApp, true);
                    PopUpManager.centerPopUp(panel);
                }
                function onLinkAvailable(ev:Event):void {
                    trace("[main] Link is: " + _fileHost.getDownloadURL());
                    startLoadingVideo(_fileHost.getDownloadURL());
                }
                function onLinkUnavailable(ev:Event):void {
                    Alert.show(resourceManager.getString('Strings', 'FILEHOST_LINK_UNAVAILABLE'));
                    // Clean up
                    resetVideoPlayer()
                    currentState = "libraryState";
                }

                // First, make sure we have subtitles, then, start filehost
                var subsLang:String = (subsLang.selectedItem as String);
                var subs:Subtitles = new Subtitles();
                subs.getSubtitlesPathForVideo(item.id, isMovie, subsLang, function(subsURL:File):void {
                    if (subsURL != null && subsURL.exists) {
                        _subtitleURL = subsURL.url;
                    }

                    // Handle Download Link stuff
                    _downloadBtnListener = function(ev:*):void {
                        _fileHost.stop();
                        _movieIsLoading = false;
                        loadingDownloadBtn.enabled = false;
                        loadingDownloadContent.visible = true;
                    };
                    loadingDownloadBtn.enabled = true;
                    loadingDownloadBtn.addEventListener(MouseEvent.CLICK, _downloadBtnListener);

                    loadingDownloadLink.htmlText = '  <a href="'+item.url+'">'+item.url+'</a>';
                    if (subsURL.exists) {
                        loadingSubtitleLink.text = subsURL.name;
                        loadingSubtitleBtn.enabled = true;
                    }

                    _openSubtitlesFolderListener = function(ev:*):void {
                        subsURL.parent.openWithDefaultApplication();
                    };
                    loadingSubtitleBtn.addEventListener(MouseEvent.CLICK, _openSubtitlesFolderListener);

                    // Start downloading from filehost
                    _fileHost.start();
                    trace("[main] Starting filehost");
                });
            }

            private function startLoadingVideo(movieURL:String):void
            {
                libraryMainLabel.text = "Buffering movie...";
                var _videoPlayer:IVideoPlayer = VideoPlayer.create(_settings, movieURL, _subtitleURL);
                _videoPlayer.addEventListener(VideoPlayer.PLAYER_INITIALIZING, onVideoPlayerInit);
                _videoPlayer.addEventListener(VideoPlayer.PLAYER_READY, onVideoPlayerReady);
                _videoPlayer.addEventListener(VideoPlayer.PLAYER_STOPPED, onVideoPlayerStopped);
                _videoPlayer.addEventListener(VideoPlayer.VIDEO_NOT_AVAILABLE, onVideoNotAvailable);

                function onVideoPlayerInit(event:Event):void {
                    // Change to VideoView
                    currentState = "videoState";
                    videoCanvas.addChild(_videoPlayer.getUIComponent());
                    _videoPlayer.onAddedToStage();
                }

                function onVideoPlayerReady(event:Event):void {
                    trace("[main] onVideoPlayerReady.");
                }

                function onVideoPlayerStopped(event:Event):void {
                    resetVideoPlayer();
                    currentState = "libraryState";
                }

                function onVideoNotAvailable(event:Event):void {
                    Alert.show(resourceManager.getString('Strings', 'VIDEO_NOT_AVAILABLE'));
                    resetVideoPlayer();
                    currentState = "libraryState";
                }

                // Set subtitles size
                _videoPlayer.setSubtitleSize(_settings.getSubtitlesSize());
                // Start
                _videoPlayer.init();
            }

            private function updatesAvailable(update:Object):void
            {
                _updateData = update;
                if (_updateData && typeof _updateData[Updates.PLAYER] != 'undefined') {
                    // Check if we have a different version and we haven't notified about this one yet
                    if ((getAppVersion() != _updateData[Updates.PLAYER]) && 
                        (_updateData[Updates.PLAYER] != _settings.getLastUpdateShown())) {
                        var _title:String = resourceManager.getString('Strings', 'UPDATES_NEW_PLAYER_VERSION') + ': ' + _updateData[Updates.PLAYER];
                        var _text:String = resourceManager.getString('Strings', 'UPDATES_DOWNLOAD_NEW_PLAYER');
                        // Add extra text if it's available
                        if (typeof _updateData[Updates.PLAYER_TEXT] != 'undefined') {
                            _text += "\n" + _updateData[Updates.PLAYER_TEXT];
                        }
                        Alert.show(_text, _title, Alert.YES|Alert.NO, null, function(ev:*):void {
                            if (ev.detail == Alert.YES) {
                                navigateToURL(new URLRequest(_updateData[Updates.PLAYER_LINK]));
                            }
                        });
                    }
                    _settings.setLastUpdateShown(_updateData[Updates.PLAYER]);
                    // In case we checked when no update was available
                    if (_db != null) {
                        checkDBUpdate(_db.getVersionName());
                    }
                }
            }

            private function checkDBUpdate(dbVersion:String):void
            {
                if (_updateData && typeof _updateData[Updates.DATABASE] != 'undefined') {
                    // Check if we have a different version and we haven't notified about this one yet
                    if ((dbVersion != _updateData[Updates.DATABASE]) && 
                        (_updateData[Updates.DATABASE] != _settings.getLastDBUpdateShown())) {
                        var _title:String = resourceManager.getString('Strings', 'UPDATES_NEW_DATABASE_VERSION') + ': ' + _updateData[Updates.DATABASE];
                        var _text:String = resourceManager.getString('Strings', 'UPDATES_DOWNLOAD_NEW_DATABASE');
                        // Add extra text if it's available
                        if (typeof _updateData[Updates.DATABASE_TEXT] != 'undefined') {
                            _text += "\n" + _updateData[Updates.DATABASE_TEXT];
                        }
                        Alert.show(_text, _title, Alert.YES|Alert.NO, null, function(ev:*):void {
                            if (ev.detail == Alert.YES) {
                                navigateToURL(new URLRequest(_updateData[Updates.DATABASE_LINK]));
                            }
                        });
                    }
                    _settings.setLastDBUpdateShown(_updateData[Updates.DATABASE]);
                }
            }

            private function filterMoviesFunc(item:Object):Boolean {
                // this is much faster than using RegExp... go figure...
                return (item.name.toLowerCase().indexOf(moviesFilter.text.toLowerCase()) != -1);
            }

            private function doFilterMovies():void {
                _dataProvMovies.filterFunction = filterMoviesFunc;
                _dataProvMovies.refresh();
            }

            private function filterSeriesFunc(item:Object):Boolean {
                // this is much faster than using RegExp... go figure...
                return (item.name.toLowerCase().indexOf(seriesFilter.text.toLowerCase()) != -1);
            }

            private function doFilterSeries():void {
                _dataProvSeries.filterFunction = filterSeriesFunc;
                _dataProvSeries.refresh();
            }

            private function setSubtitlesSize():void {
                _settings.setSubtitlesSize(subtitlesSizeCombo.selectedItem.data);
            }

            private function setPreferredPlayer():void {
                _settings.setPreferredPlayer(preferredPlayerCombo.selectedItem.data);
            }
        ]]>
    </fx:Script>
    <fx:Metadata>
        [ResourceBundle("Strings")]
    </fx:Metadata>

    <s:states>
        <s:State name="settingsState" />
        <s:State name="libraryState" stateGroups="library"/>
        <s:State name="librarySeasonsState" stateGroups="library" />
        <s:State name="loadingState" />
        <s:State name="helpState" />
        <s:State name="videoState" />
    </s:states>
    <s:transitions>
        <mx:Transition id="toMainPanel" fromState="settingsState" toState="libraryState">
            <mx:Parallel target="{mainPanel}">
                <mx:Dissolve alphaFrom="0.0" alphaTo="1.0" duration="400"/>
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition id="toSeasons" fromState="libraryState" toState="librarySeasonsState">
            <mx:Parallel target="{mainPanel}">
                <mx:Dissolve alphaFrom="0.0" alphaTo="1.0" duration="400"/>
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition id="fromSeasons" fromState="librarySeasonsState" toState="libraryState">
            <mx:Parallel target="{mainPanel}">
                <mx:Dissolve alphaFrom="0.0" alphaTo="1.0" duration="200"/>
            </mx:Parallel>
        </mx:Transition>
    </s:transitions>

    <mx:Canvas width="100%" height="100%">
        <mx:Panel id="settingsPanel" includeIn="settingsState" opaqueBackground="#39628C" width="100%" height="100%" 
        title="{resourceManager.getString('Strings', 'SETTINGS_PANEL_TITLE')}"
        paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
            <s:VGroup>
                <s:HGroup verticalAlign="middle" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                    <mx:Text id="settingsDBInfo" fontSize="12" width="670" color="#FFFFFF" 
                        htmlText="{resourceManager.getString('Strings', 'SETTINGS_DATABASE_INFO')}" />
                </s:HGroup>

                <s:HGroup verticalAlign="middle" paddingTop="0" paddingBottom="10" paddingLeft="5" paddingRight="5">
                    <s:Label fontSize="13" fontWeight="bold" text="{resourceManager.getString('Strings', 'SETTINGS_DATABASE_LABEL')}:" />
                    <s:Label id="databaseLbl" fontSize="13" color="#EEEEEE"
                        text="{resourceManager.getString('Strings', 'SETTINGS_DATABASE_NONE_LABEL')}" />
                    <s:Button id="databaseBtn" enabled="false" label="{resourceManager.getString('Strings', 'SETTINGS_DATABASE_SET_LABEL')}" />
                    <s:Label id="databaseError" fontSize="13" color="#FF8888" />
                </s:HGroup>

                <s:HGroup verticalAlign="middle" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                    <mx:Text id="settingsSubsInfo" fontSize="12" width="670" color="#FFFFFF" 
                        htmlText="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_INFO')}" />
                </s:HGroup>
                <s:HGroup verticalAlign="middle" paddingTop="0" paddingBottom="10" paddingLeft="5" paddingRight="5">
                    <s:Label fontSize="13" fontWeight="bold" text="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_LABEL')}:" />
                    <s:Label id="subtitlesLbl" fontSize="13" color="#EEEEEE"
                        text="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_NONE_LABEL')}" />
                    <s:Button id="subtitlesBtn" enabled="false" label="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_SET_LABEL')}" />
                </s:HGroup>

                <s:HGroup verticalAlign="middle" paddingTop="0" paddingBottom="10" paddingLeft="5" paddingRight="5">
                    <s:Label fontSize="13" fontWeight="bold" text="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_SIZE_LABEL')}:" />
                    <mx:ComboBox id="subtitlesSizeCombo" change="setSubtitlesSize();">
                       <mx:ArrayCollection>
                          <fx:Object label="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_SIZE_SMALL')}" data="SMALL"/>
                          <fx:Object label="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_SIZE_NORMAL')}" data="NORMAL"/>
                          <fx:Object label="{resourceManager.getString('Strings', 'SETTINGS_SUBTITLES_SIZE_BIG')}" data="BIG"/>
                       </mx:ArrayCollection>
                    </mx:ComboBox>
                </s:HGroup>

                <s:HGroup verticalAlign="middle" paddingTop="0" paddingBottom="0" paddingLeft="5" paddingRight="5">
                    <s:Label fontSize="13" fontWeight="bold" text="{resourceManager.getString('Strings', 'SETTINGS_PREFERRED_PLAYER_LABEL')}:" />
                    <mx:ComboBox id="preferredPlayerCombo" change="setPreferredPlayer();">
                       <mx:ArrayCollection>
                          <fx:Object label="{resourceManager.getString('Strings', 'SETTINGS_PREFERRED_PLAYER_NEW')}" data="OWN"/>
                          <fx:Object label="{resourceManager.getString('Strings', 'SETTINGS_PREFERRED_PLAYER_OLD')}" data="FLOW"/>
                       </mx:ArrayCollection>
                    </mx:ComboBox>
                    <mx:Spacer width="100%" height="20" />
                </s:HGroup>

                <s:HGroup paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                    <mx:Spacer width="280" height="40" />
                    <s:Button id="settingsStartBtn" label="{resourceManager.getString('Strings', 'SETTINGS_START_BUTTON')}" 
                        height="36" click="loadContent()" enabled="false" />
                    <mx:Spacer width="200" height="20" />
                </s:HGroup>
                <s:HGroup paddingTop="0" paddingBottom="0" paddingLeft="5" paddingRight="5">
                    <mx:Spacer width="430" height="10" />
                    <s:Label text="v{getAppVersion()} Copyright (C) 2011 Tirino (GNU GPL v3)" fontSize="10" color="#FFE8B5" />
                </s:HGroup>
                <s:HGroup paddingTop="0" paddingBottom="0" paddingLeft="5" paddingRight="5">
                    <mx:Spacer width="430" height="10" />
                    <mx:Text id="contactInfo" fontSize="10" color="#FFFFFF" htmlText="{_contactInfoTwitter}" />
                </s:HGroup>
            </s:VGroup>
        </mx:Panel>

        <mx:Panel id="mainPanel" includeIn="library" opaqueBackground="#39628C" width="100%" height="100%" 
            title="{resourceManager.getString('Strings', 'MAIN_PANEL_TITLE')}" 
            title.librarySeasonsState="{resourceManager.getString('Strings', 'SEASONS_AND_EPISODES')}: {dgSeries.selectedItem.name}"
            paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">

            <mx:HBox width="100%" height="22">
                <s:Label id="libraryMainLabel" width="100%" height="22" fontSize="12" color="#E6A3B0"
                    text="{resourceManager.getString('Strings', 'MAIN_LABEL')}:"
                    text.librarySeasonsState="{resourceManager.getString('Strings', 'SEASONS_LABEL')}" />
            </mx:HBox>

            <mx:Canvas width="100%" height="100%">
                <mx:Tile id="mainLibraryTile" direction="horizontal" includeIn="libraryState">
                    <s:Group>
                        <s:layout>
                            <s:VerticalLayout gap="4" />
                        </s:layout>
                        <s:Group>
                            <s:layout>
                                <s:HorizontalLayout gap="4" />
                            </s:layout>
                            <mx:Label text="{resourceManager.getString('Strings', 'FILTER_MOVIES')}: "/>
                            <mx:TextInput id="moviesFilter" change="doFilterMovies();" tabIndex="1" />
                        </s:Group>
                        <mx:DataGrid id="dgMovies" height="100%" left="4" right="4" top="4" bottom="4" 
                            dataProvider="{_dataProvMovies}" doubleClickEnabled="true" tabIndex="3">
                            <mx:columns>
                                <mx:DataGridColumn headerText="{resourceManager.getString('Strings', 'HEADER_MOVIES')}" 
                                dataField="name" width="330" />
                            </mx:columns>
                        </mx:DataGrid>
                    </s:Group>

                    <s:Group>
                        <s:layout>
                            <s:VerticalLayout gap="4" />
                        </s:layout>
                        <s:Group>
                            <s:layout>
                                <s:HorizontalLayout gap="4" />
                            </s:layout>
                            <mx:Label text="{resourceManager.getString('Strings', 'FILTER_SERIES')}: "/>
                            <mx:TextInput id="seriesFilter" change="doFilterSeries();" tabIndex="2"/>
                        </s:Group>
                        <mx:DataGrid id="dgSeries" height="100%" left="4" right="4" top="4" bottom="4" 
                            dataProvider="{_dataProvSeries}" doubleClickEnabled="true" tabIndex="4">
                            <mx:columns>
                                <mx:DataGridColumn headerText="{resourceManager.getString('Strings', 'HEADER_SERIES')}" 
                                dataField="name" width="330" />
                            </mx:columns>
                        </mx:DataGrid>
                    </s:Group>
                </mx:Tile>
                <s:Group includeIn="librarySeasonsState">
                   <s:layout>
                       <s:VerticalLayout gap="4" />
                   </s:layout>
                   <s:Button label="{resourceManager.getString('Strings', 'BACK_BUTTON')}" click="currentState='libraryState';" width="100"/>
                   <mx:Tile id="seasonsLibraryTile" direction="horizontal">
                       <mx:DataGrid id="dgSeasons" height="100%" left="4" right="4" top="4" bottom="4" 
                            dataProvider="{_dataProvSeasons}" doubleClickEnabled="true">
                           <mx:columns>
                               <mx:DataGridColumn headerText="{resourceManager.getString('Strings', 'HEADER_SEASONS')}" 
                               dataField="name" width="330" />
                           </mx:columns>
                       </mx:DataGrid>
                       <mx:DataGrid id="dgEpisodes" height="100%" left="4" right="4" top="4" bottom="4" 
                            dataProvider="{_dataProvEpisodes}" doubleClickEnabled="true">
                           <mx:columns>
                               <mx:DataGridColumn headerText="{resourceManager.getString('Strings', 'HEADER_EPISODES')}" 
                               dataField="name" width="330" />
                           </mx:columns>
                       </mx:DataGrid>
                   </mx:Tile>
                </s:Group>
            </mx:Canvas>
            <mx:ControlBar width="100%" id="controlBar">
                <mx:Label text="{resourceManager.getString('Strings', 'SUBTILES_LANGUAGE')}:"/>
                <mx:Spacer width="30%"/>
                <mx:ComboBox id="subsLang" tabIndex="5"> 
                   <mx:ArrayCollection>
                      <fx:String>ES</fx:String>
                      <fx:String>EN</fx:String>
                      <fx:String>PT</fx:String>
                   </mx:ArrayCollection>
                </mx:ComboBox>
                <mx:Spacer width="60%"/>
                <s:Button label="{resourceManager.getString('Strings', 'HELP_LABEL')}" click="loadHelp();" />
                <s:Button label="{resourceManager.getString('Strings', 'SETTINGS_LABEL')}" click="loadSettings();" />
            </mx:ControlBar>
        </mx:Panel>

        <mx:Canvas width="100%" height="100%" includeIn="loadingState">
            <mx:Panel id="loadingPanel" opaqueBackground="#39628C" width="100%" height="100%" 
                title="{resourceManager.getString('Strings', 'VIDEO_LOADING')}"
                paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                
                <s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
                    <mx:Spacer width="100%" height="35%" />
                    <s:Label id="loadingLbl" width="100%" height="50" fontSize="18" color="#FFF7B7" 
                    text="{resourceManager.getString('Strings', 'CONTACTING_REMOTE_SERVER')}" 
                    textAlign="center" />

                    <mx:Spacer width="100%" height="50" />
                    <s:Button id="loadingDownloadBtn" width="260" fontSize="14" enabled="false" 
                        label="{resourceManager.getString('Strings', 'DOWNLOAD_STOP_BUTTON')}" />

                    <s:VGroup width="100%" height="100%" verticalAlign="middle" id="loadingDownloadContent" visible="false">
                        <mx:Text id="loadingDownloadLink" fontSize="12" width="300" color="#FFFFFF" htmlText="" />
                        <s:HGroup paddingTop="0" paddingBottom="0" paddingLeft="0" paddingRight="0" verticalAlign="middle" >
                            <s:Button id="loadingSubtitleBtn" fontSize="12" width="170"
                                label="{resourceManager.getString('Strings', 'DOWNLOAD_SUBTITLE_LABEL')}" enabled="false" />
                            <s:Label id="loadingSubtitleLink" width="100%" height="18" fontSize="14" color="#FFF7B7" text="" />
                        </s:HGroup>
                        <mx:Spacer width="100%" height="30" />
                        <s:Button label="{resourceManager.getString('Strings', 'BACK_BUTTON')}" click="currentState='libraryState';" width="100"/>
                    </s:VGroup>
                </s:VGroup>
            </mx:Panel>
        </mx:Canvas>
        <mx:Canvas id="helpCanvas" width="100%" height="100%" includeIn="helpState">
            <mx:Panel id="helpPanel" opaqueBackground="#39628C" width="100%" height="100%" title="{resourceManager.getString('Strings', 'HELP_LABEL')}"
                paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
                <mx:Canvas id="helpHtml" width="100%" height="90%">
                    <s:Label width="100%" fontSize="14" color="#FFF7B7" text="{resourceManager.getString('Strings', 'HELP_LOADING')}" textAlign="center" />
                </mx:Canvas>
                <s:Button label="{resourceManager.getString('Strings', 'BACK_BUTTON')}" click="currentState='libraryState';" width="100"/>
            </mx:Panel>
        </mx:Canvas>

        <mx:Canvas id="videoCanvas" width="100%" opaqueBackground="#000000" height="100%" includeIn="videoState"/>
    </mx:Canvas>

</s:WindowedApplication>